// <auto-generated />
using System;
using System.Collections.Generic;
using Capstone.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Capstone.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250514213353_Update-Exam-Session-Add-Score-hehe-kity")]
    partial class UpdateExamSessionAddScorehehekity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Capstone.Domain.ChapterDomain.Models.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Capstone.Domain.ClassDomain.Models.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Capstone.Domain.ExamModule.Models.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("ExamTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Capstone.Domain.ExamSessionModule.Models.ExamSession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCodeBased")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ExamSessions");
                });

            modelBuilder.Entity("Capstone.Domain.ExamTemplateModule.Models.ExamTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExamTemplates");
                });

            modelBuilder.Entity("Capstone.Domain.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Capstone.Domain.QuestionDomain.Common.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BeforeQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLastVersion")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RootId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasDiscriminator().HasValue("Question");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Capstone.Domain.SubjectDomain.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasDiscriminator().HasValue("Subject");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Capstone.Domain.UserAccess.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("UserName", "Capstone.Domain.UserAccess.Models.User.UserName#UserName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("UserName");
                        });

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PersistedGrantsDb");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Capstone.Domain.QuestionDomain.MatchingQuestion.Models.MatchingQuestion", b =>
                {
                    b.HasBaseType("Capstone.Domain.QuestionDomain.Common.Models.Question");

                    b.HasDiscriminator().HasValue("MatchingQuestion");
                });

            modelBuilder.Entity("Capstone.Domain.QuestionDomain.MultiChoiceQuestion.Models.MultiChoiceQuestion", b =>
                {
                    b.HasBaseType("Capstone.Domain.QuestionDomain.Common.Models.Question");

                    b.HasDiscriminator().HasValue("MultiChoiceQuestion");
                });

            modelBuilder.Entity("Capstone.Domain.QuestionDomain.SingleChoiceQuestion.Models.SingleChoiceQuestion", b =>
                {
                    b.HasBaseType("Capstone.Domain.QuestionDomain.Common.Models.Question");

                    b.Property<Guid>("CorrectAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("SingleChoiceQuestion");
                });

            modelBuilder.Entity("Capstone.Domain.QuestionDomain.TrueFalseQuestion.Models.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("Capstone.Domain.QuestionDomain.Common.Models.Question");

                    b.Property<bool>("IsTrueAnswer")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("TrueFalseQuestion");
                });

            modelBuilder.Entity("Capstone.Domain.SubjectDomain.Models.SystemSubject", b =>
                {
                    b.HasBaseType("Capstone.Domain.SubjectDomain.Models.Subject");

                    b.HasDiscriminator().HasValue("SystemSubject");
                });

            modelBuilder.Entity("Capstone.Domain.SubjectDomain.Models.TeacherSubject", b =>
                {
                    b.HasBaseType("Capstone.Domain.SubjectDomain.Models.Subject");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("TeacherSubject");
                });

            modelBuilder.Entity("Capstone.Domain.StudentDomain.Models.Student", b =>
                {
                    b.HasBaseType("Capstone.Domain.UserAccess.Models.User");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Capstone.Domain.TeacherDomain.Models.Teacher", b =>
                {
                    b.HasBaseType("Capstone.Domain.UserAccess.Models.User");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Capstone.Domain.ChapterDomain.Models.Chapter", b =>
                {
                    b.OwnsMany("Capstone.Domain.QuestionDomain.Common.ValueObjects.QuestionId", "QuestionIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ChapterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("QuestionId");

                            b1.HasKey("Id");

                            b1.HasIndex("ChapterId");

                            b1.ToTable("ChapterQuestionIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ChapterId");
                        });

                    b.Navigation("QuestionIds");
                });

            modelBuilder.Entity("Capstone.Domain.ClassDomain.Models.Class", b =>
                {
                    b.OwnsMany("Capstone.Domain.ClassDomain.Entities.ClassStudent", "Students", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ClassStudentId");

                            b1.Property<Guid>("ClassId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id", "ClassId");

                            b1.HasIndex("ClassId");

                            b1.ToTable("ClassStudents", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClassId");
                        });

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Capstone.Domain.ExamModule.Models.Exam", b =>
                {
                    b.OwnsMany("Capstone.Domain.ExamModule.Entities.ExamVersion", "ExamVersions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("ExamId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsAnswerShuffle")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OrderQuestion")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("ExamId");

                            b1.ToTable("ExamExamVersions", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ExamId");

                            b1.OwnsMany("Capstone.Domain.ExamModule.ValueObjects.ExamQuestion", "Questions", b2 =>
                                {
                                    b2.Property<Guid>("ExamVersionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("QuestionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Order")
                                        .HasColumnType("int");

                                    b2.Property<double>("PointPerCorrect")
                                        .HasColumnType("float");

                                    b2.Property<double>("PointPerInCorrect")
                                        .HasColumnType("float");

                                    b2.HasKey("ExamVersionId", "QuestionId");

                                    b2.ToTable("ExamVersionQuestions", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("ExamVersionId");
                                });

                            b1.Navigation("Questions");
                        });

                    b.Navigation("ExamVersions");
                });

            modelBuilder.Entity("Capstone.Domain.ExamSessionModule.Models.ExamSession", b =>
                {
                    b.OwnsMany("Capstone.Domain.ExamSessionModule.Entities.Participant", "Participants", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("ExamSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("ExamVersionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FullName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("IsDone")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsFree")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("Score")
                                .HasColumnType("float");

                            b1.Property<DateTime?>("StartAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("StudentId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("SubmittedAt")
                                .HasColumnType("datetime2");

                            b1.HasKey("Id");

                            b1.HasIndex("ExamSessionId");

                            b1.ToTable("ExamSessionParticipants", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ExamSessionId");

                            b1.OwnsMany("Capstone.Domain.ExamSessionModule.Entities.ParticipantAction", "Actions", b2 =>
                                {
                                    b2.Property<Guid>("ParticipantId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("ActionType")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime?>("CreatedAt")
                                        .HasColumnType("datetime2");

                                    b2.Property<string>("CreatedBy")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime?>("LastModified")
                                        .HasColumnType("datetime2");

                                    b2.Property<string>("LastModifiedBy")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParticipantId", "Id");

                                    b2.ToTable("ParticipantActions", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("ParticipantId");
                                });

                            b1.OwnsMany("Capstone.Domain.ExamSessionModule.Entities.ParticipantAnswer", "Answers", b2 =>
                                {
                                    b2.Property<Guid>("ParticipantId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("AnswerRaw")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime?>("CreatedAt")
                                        .HasColumnType("datetime2");

                                    b2.Property<string>("CreatedBy")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<bool?>("IsCorrect")
                                        .HasColumnType("bit");

                                    b2.Property<DateTime?>("LastModified")
                                        .HasColumnType("datetime2");

                                    b2.Property<string>("LastModifiedBy")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<Guid>("QuestionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("ParticipantId", "Id");

                                    b2.ToTable("ParticipantAnswers", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("ParticipantId");
                                });

                            b1.Navigation("Actions");

                            b1.Navigation("Answers");
                        });

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Capstone.Domain.ExamTemplateModule.Models.ExamTemplate", b =>
                {
                    b.OwnsMany("Capstone.Domain.ExamTemplateModule.Entities.ExamTemplateSection", "ExamTemplateSection", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ChapterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("ExamTemplateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("ExamTemplateId");

                            b1.ToTable("ExamTemplateExamTemplateSections", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ExamTemplateId");

                            b1.OwnsMany("Capstone.Domain.ExamTemplateModule.ValueObjects.DifficultySectionConfig", "DifficultyConfigs", b2 =>
                                {
                                    b2.Property<Guid>("ExamTemplateSectionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Difficulty")
                                        .HasColumnType("nvarchar(450)");

                                    b2.HasKey("ExamTemplateSectionId", "Difficulty");

                                    b2.ToTable("ExamTemplateSectionDifficultyConfigs", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("ExamTemplateSectionId");

                                    b2.OwnsMany("Capstone.Domain.ExamTemplateModule.ValueObjects.QuestionTypeConfig", "QuestionTypeConfigs", b3 =>
                                        {
                                            b3.Property<Guid>("ExamTemplateSectionId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<string>("Difficulty")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<string>("Type")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("NumberOfQuestions")
                                                .HasColumnType("int");

                                            b3.Property<double>("PointPerCorrect")
                                                .HasColumnType("float");

                                            b3.Property<double>("PointPerInCorrect")
                                                .HasColumnType("float");

                                            b3.HasKey("ExamTemplateSectionId", "Difficulty", "Type");

                                            b3.ToTable("DifficultyConfig_QuestionTypeConfigs", (string)null);

                                            b3.WithOwner()
                                                .HasForeignKey("ExamTemplateSectionId", "Difficulty");
                                        });

                                    b2.Navigation("QuestionTypeConfigs");
                                });

                            b1.Navigation("DifficultyConfigs");
                        });

                    b.Navigation("ExamTemplateSection");
                });

            modelBuilder.Entity("Capstone.Domain.SubjectDomain.Models.Subject", b =>
                {
                    b.OwnsMany("Capstone.Domain.ChapterDomain.ValueObjects.ChapterId", "ChapterIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("SubjectId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ChapterId");

                            b1.HasKey("Id");

                            b1.HasIndex("SubjectId");

                            b1.ToTable("SubjectChapterIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SubjectId");
                        });

                    b.Navigation("ChapterIds");
                });

            modelBuilder.Entity("Capstone.Domain.UserAccess.Models.User", b =>
                {
                    b.OwnsOne("Capstone.Domain.Common.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("AppUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Capstone.Domain.Common.ValueObjects.Image", "Avatar", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Url");

                            b1.HasKey("UserId");

                            b1.ToTable("AppUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Capstone.Domain.Common.ValueObjects.PhoneNumber", "Phone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Phone");

                            b1.HasKey("UserId");

                            b1.ToTable("AppUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Avatar");

                    b.Navigation("Email");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Capstone.Domain.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Capstone.Domain.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Domain.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Capstone.Domain.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Capstone.Domain.QuestionDomain.MatchingQuestion.Models.MatchingQuestion", b =>
                {
                    b.OwnsMany("Capstone.Domain.QuestionDomain.MatchingQuestion.Entities.MatchingPair", "MatchingPairs", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("QuestionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id", "QuestionId");

                            b1.HasIndex("QuestionId");

                            b1.ToTable("MatchingQuestionsMatchingPairs", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("QuestionId");

                            b1.OwnsOne("Capstone.Domain.QuestionDomain.MatchingQuestion.ValueObjects.MatchingPairContentLeft", "Left", b2 =>
                                {
                                    b2.Property<Guid>("MatchingPairId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("MatchingPairQuestionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("LeftId");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("LeftValue");

                                    b2.HasKey("MatchingPairId", "MatchingPairQuestionId");

                                    b2.ToTable("MatchingQuestionsMatchingPairs");

                                    b2.WithOwner()
                                        .HasForeignKey("MatchingPairId", "MatchingPairQuestionId");
                                });

                            b1.OwnsOne("Capstone.Domain.QuestionDomain.MatchingQuestion.ValueObjects.MatchingPairContentRight", "Right", b2 =>
                                {
                                    b2.Property<Guid>("MatchingPairId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("MatchingPairQuestionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("RightId");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("RightValue");

                                    b2.HasKey("MatchingPairId", "MatchingPairQuestionId");

                                    b2.ToTable("MatchingQuestionsMatchingPairs");

                                    b2.WithOwner()
                                        .HasForeignKey("MatchingPairId", "MatchingPairQuestionId");
                                });

                            b1.Navigation("Left")
                                .IsRequired();

                            b1.Navigation("Right")
                                .IsRequired();
                        });

                    b.Navigation("MatchingPairs");
                });

            modelBuilder.Entity("Capstone.Domain.QuestionDomain.MultiChoiceQuestion.Models.MultiChoiceQuestion", b =>
                {
                    b.OwnsMany("Capstone.Domain.QuestionDomain.MultiChoiceQuestion.Entities.ChoiceMulti", "Choices", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("QuestionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("IsCorrect")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id", "QuestionId");

                            b1.HasIndex("QuestionId");

                            b1.ToTable("MultiChoiceQuestionsChoices", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("QuestionId");
                        });

                    b.Navigation("Choices");
                });

            modelBuilder.Entity("Capstone.Domain.QuestionDomain.SingleChoiceQuestion.Models.SingleChoiceQuestion", b =>
                {
                    b.OwnsMany("Capstone.Domain.QuestionDomain.SingleChoiceQuestion.Entities.ChoiceSingle", "Choices", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("SingleChoiceQuestionChoiceId");

                            b1.Property<Guid>("QuestionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id", "QuestionId");

                            b1.HasIndex("QuestionId");

                            b1.ToTable("SingleChoiceQuestionsChoices", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("QuestionId");
                        });

                    b.Navigation("Choices");
                });

            modelBuilder.Entity("Capstone.Domain.SubjectDomain.Models.TeacherSubject", b =>
                {
                    b.OwnsMany("Capstone.Domain.ClassDomain.ValueObjects.ClassId", "ClassIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("TeacherSubjectId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ClassId");

                            b1.HasKey("Id");

                            b1.HasIndex("TeacherSubjectId");

                            b1.ToTable("TeacherSubjectClasses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TeacherSubjectId");
                        });

                    b.Navigation("ClassIds");
                });
#pragma warning restore 612, 618
        }
    }
}
